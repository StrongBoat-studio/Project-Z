//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Game/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""16f71c71-a599-40b7-a666-7f9d02f25c28"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""e9d0caa4-0bad-4ba7-904a-1b9bdb054114"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""94daed8d-7c31-47a9-833b-4fa28217e8d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""ecaf1de3-4e25-45f9-a976-d7ee9e85f7d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Creep"",
                    ""type"": ""Button"",
                    ""id"": ""9b6bdd1c-8ac6-4856-bcdb-8a19aea7de36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""0ffb4e63-1a85-49f3-a803-48a4caa255a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b65ba933-4a0e-4661-bb6a-becb7d2cd8fa"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""ff35ab66-cb4e-4fdd-8a0f-8c7e503d1713"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""801a8adf-c910-481c-995c-2640cc3b32c8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c63c71c9-0c05-4876-a784-cd47b6a14a38"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b1a2631-5f72-468e-ad37-7fd303fd0f2b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d30fce3b-c852-4fb3-83ee-cd200ddc03fc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19b5ea93-9d00-4f06-a28d-a7fc80925f3e"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Creep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94138441-26ec-49ea-90a1-5d975aa36daf"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactions"",
            ""id"": ""51e9adb4-47f1-464b-960b-502cc799d701"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""1eabe7d7-e7a6-4f13-99ea-1ca0e680fc6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""e0c804e9-09d7-4ae1-ab8a-056e039b0d7a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8257cba-df67-46d1-82fc-861f613dbd1f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55e8e8ba-445a-449c-a252-8c45d9ba8969"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""efa23bdc-3541-411e-be5d-43620f9c5bde"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""74383e13-52dc-4d3b-af28-58db6f144829"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14173298-1095-4e75-a669-10ec5e3390fb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""acdfb363-9535-495b-b0cc-61f0a011592c"",
            ""actions"": [
                {
                    ""name"": ""ContinueKbd"",
                    ""type"": ""Button"",
                    ""id"": ""808b3ade-514b-4c55-829e-5e7e59d69d41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ContinueMouse"",
                    ""type"": ""Button"",
                    ""id"": ""7afc502b-e9f1-49c3-b332-4a940b0216c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1fb8ac9-11c1-435c-9e87-0c9f16c408da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContinueKbd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0780044-3410-4f85-b531-83f1480158c1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContinueMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Crafting"",
            ""id"": ""85dcd156-03e1-4ce7-ab3b-88bad42b3819"",
            ""actions"": [
                {
                    ""name"": ""CloseExclusive"",
                    ""type"": ""Button"",
                    ""id"": ""57826911-c6d6-45ba-84f3-546430d6aa7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4fc252c5-1949-43d5-b2a8-276e59e5cd4b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseExclusive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shooting"",
            ""id"": ""912aaf08-05aa-4b0e-ab29-54ca18828b4e"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""d21851e6-e4dc-4195-9797-0137c93fa771"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Button"",
                    ""id"": ""7bc6422f-c8a5-4282-85db-ff1048690c10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b062f86d-41b7-426c-b105-9881e404d6b5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d5c3201-3df9-45f1-893c-c34a2c904a13"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Stab"",
            ""id"": ""0bdf4b2e-3d6b-4b4e-988c-333cb23034ea"",
            ""actions"": [
                {
                    ""name"": ""Stab"",
                    ""type"": ""Button"",
                    ""id"": ""41bb98dc-7747-459c-b13c-1203d9ba356d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Button"",
                    ""id"": ""ae4d08a8-62eb-4d55-94ea-c4c37f73ffe7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e74fce4-f5a6-4356-a19b-8152b53def00"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7b61cd6-184d-4e60-9bbc-09d35b64272d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HandToHand"",
            ""id"": ""52f51bd5-29f8-4791-8b09-1a01cdc41c67"",
            ""actions"": [
                {
                    ""name"": ""Hit"",
                    ""type"": ""Button"",
                    ""id"": ""010240ed-f607-442d-87ec-175160cb68a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Button"",
                    ""id"": ""c435a5fd-f3a9-4d78-8baa-9859661be801"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ddfc9c62-1314-4bc2-a741-4515b5745595"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eab7b183-a4c8-44e4-8f96-3441fe9289ea"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Journal"",
            ""id"": ""b61cddb5-70b7-4fc2-a3a3-b5ed91db444c"",
            ""actions"": [
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""e596b0a6-e5f2-44d4-aa57-d38112dfc98d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExclusiveClose"",
                    ""type"": ""Button"",
                    ""id"": ""8d4a3a3f-ad69-4d04-83ab-50dddec67560"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6245e80b-2867-4a75-bb89-8e879fc9a978"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93bd5aa2-f81f-4c9f-aafd-a6dab0fb4366"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExclusiveClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_Walk = m_InGame.FindAction("Walk", throwIfNotFound: true);
        m_InGame_Jump = m_InGame.FindAction("Jump", throwIfNotFound: true);
        m_InGame_Crouch = m_InGame.FindAction("Crouch", throwIfNotFound: true);
        m_InGame_Creep = m_InGame.FindAction("Creep", throwIfNotFound: true);
        m_InGame_Run = m_InGame.FindAction("Run", throwIfNotFound: true);
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
        m_Interactions_Interact = m_Interactions.FindAction("Interact", throwIfNotFound: true);
        m_Interactions_MousePosition = m_Interactions.FindAction("MousePosition", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_Pause = m_PauseMenu.FindAction("Pause", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_ContinueKbd = m_Dialogue.FindAction("ContinueKbd", throwIfNotFound: true);
        m_Dialogue_ContinueMouse = m_Dialogue.FindAction("ContinueMouse", throwIfNotFound: true);
        // Crafting
        m_Crafting = asset.FindActionMap("Crafting", throwIfNotFound: true);
        m_Crafting_CloseExclusive = m_Crafting.FindAction("CloseExclusive", throwIfNotFound: true);
        // Shooting
        m_Shooting = asset.FindActionMap("Shooting", throwIfNotFound: true);
        m_Shooting_Shoot = m_Shooting.FindAction("Shoot", throwIfNotFound: true);
        m_Shooting_MousePosition = m_Shooting.FindAction("MousePosition", throwIfNotFound: true);
        // Stab
        m_Stab = asset.FindActionMap("Stab", throwIfNotFound: true);
        m_Stab_Stab = m_Stab.FindAction("Stab", throwIfNotFound: true);
        m_Stab_MousePosition = m_Stab.FindAction("MousePosition", throwIfNotFound: true);
        // HandToHand
        m_HandToHand = asset.FindActionMap("HandToHand", throwIfNotFound: true);
        m_HandToHand_Hit = m_HandToHand.FindAction("Hit", throwIfNotFound: true);
        m_HandToHand_MousePosition = m_HandToHand.FindAction("MousePosition", throwIfNotFound: true);
        // Journal
        m_Journal = asset.FindActionMap("Journal", throwIfNotFound: true);
        m_Journal_Open = m_Journal.FindAction("Open", throwIfNotFound: true);
        m_Journal_ExclusiveClose = m_Journal.FindAction("ExclusiveClose", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private IInGameActions m_InGameActionsCallbackInterface;
    private readonly InputAction m_InGame_Walk;
    private readonly InputAction m_InGame_Jump;
    private readonly InputAction m_InGame_Crouch;
    private readonly InputAction m_InGame_Creep;
    private readonly InputAction m_InGame_Run;
    public struct InGameActions
    {
        private @PlayerInput m_Wrapper;
        public InGameActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_InGame_Walk;
        public InputAction @Jump => m_Wrapper.m_InGame_Jump;
        public InputAction @Crouch => m_Wrapper.m_InGame_Crouch;
        public InputAction @Creep => m_Wrapper.m_InGame_Creep;
        public InputAction @Run => m_Wrapper.m_InGame_Run;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void SetCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnWalk;
                @Jump.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnCrouch;
                @Creep.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnCreep;
                @Creep.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnCreep;
                @Creep.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnCreep;
                @Run.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_InGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Creep.started += instance.OnCreep;
                @Creep.performed += instance.OnCreep;
                @Creep.canceled += instance.OnCreep;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public InGameActions @InGame => new InGameActions(this);

    // Interactions
    private readonly InputActionMap m_Interactions;
    private IInteractionsActions m_InteractionsActionsCallbackInterface;
    private readonly InputAction m_Interactions_Interact;
    private readonly InputAction m_Interactions_MousePosition;
    public struct InteractionsActions
    {
        private @PlayerInput m_Wrapper;
        public InteractionsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interactions_Interact;
        public InputAction @MousePosition => m_Wrapper.m_Interactions_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteract;
                @MousePosition.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_InteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private IPauseMenuActions m_PauseMenuActionsCallbackInterface;
    private readonly InputAction m_PauseMenu_Pause;
    public struct PauseMenuActions
    {
        private @PlayerInput m_Wrapper;
        public PauseMenuActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_PauseMenu_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PauseMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private IDialogueActions m_DialogueActionsCallbackInterface;
    private readonly InputAction m_Dialogue_ContinueKbd;
    private readonly InputAction m_Dialogue_ContinueMouse;
    public struct DialogueActions
    {
        private @PlayerInput m_Wrapper;
        public DialogueActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContinueKbd => m_Wrapper.m_Dialogue_ContinueKbd;
        public InputAction @ContinueMouse => m_Wrapper.m_Dialogue_ContinueMouse;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void SetCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterface != null)
            {
                @ContinueKbd.started -= m_Wrapper.m_DialogueActionsCallbackInterface.OnContinueKbd;
                @ContinueKbd.performed -= m_Wrapper.m_DialogueActionsCallbackInterface.OnContinueKbd;
                @ContinueKbd.canceled -= m_Wrapper.m_DialogueActionsCallbackInterface.OnContinueKbd;
                @ContinueMouse.started -= m_Wrapper.m_DialogueActionsCallbackInterface.OnContinueMouse;
                @ContinueMouse.performed -= m_Wrapper.m_DialogueActionsCallbackInterface.OnContinueMouse;
                @ContinueMouse.canceled -= m_Wrapper.m_DialogueActionsCallbackInterface.OnContinueMouse;
            }
            m_Wrapper.m_DialogueActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ContinueKbd.started += instance.OnContinueKbd;
                @ContinueKbd.performed += instance.OnContinueKbd;
                @ContinueKbd.canceled += instance.OnContinueKbd;
                @ContinueMouse.started += instance.OnContinueMouse;
                @ContinueMouse.performed += instance.OnContinueMouse;
                @ContinueMouse.canceled += instance.OnContinueMouse;
            }
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);

    // Crafting
    private readonly InputActionMap m_Crafting;
    private ICraftingActions m_CraftingActionsCallbackInterface;
    private readonly InputAction m_Crafting_CloseExclusive;
    public struct CraftingActions
    {
        private @PlayerInput m_Wrapper;
        public CraftingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseExclusive => m_Wrapper.m_Crafting_CloseExclusive;
        public InputActionMap Get() { return m_Wrapper.m_Crafting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraftingActions set) { return set.Get(); }
        public void SetCallbacks(ICraftingActions instance)
        {
            if (m_Wrapper.m_CraftingActionsCallbackInterface != null)
            {
                @CloseExclusive.started -= m_Wrapper.m_CraftingActionsCallbackInterface.OnCloseExclusive;
                @CloseExclusive.performed -= m_Wrapper.m_CraftingActionsCallbackInterface.OnCloseExclusive;
                @CloseExclusive.canceled -= m_Wrapper.m_CraftingActionsCallbackInterface.OnCloseExclusive;
            }
            m_Wrapper.m_CraftingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CloseExclusive.started += instance.OnCloseExclusive;
                @CloseExclusive.performed += instance.OnCloseExclusive;
                @CloseExclusive.canceled += instance.OnCloseExclusive;
            }
        }
    }
    public CraftingActions @Crafting => new CraftingActions(this);

    // Shooting
    private readonly InputActionMap m_Shooting;
    private IShootingActions m_ShootingActionsCallbackInterface;
    private readonly InputAction m_Shooting_Shoot;
    private readonly InputAction m_Shooting_MousePosition;
    public struct ShootingActions
    {
        private @PlayerInput m_Wrapper;
        public ShootingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Shooting_Shoot;
        public InputAction @MousePosition => m_Wrapper.m_Shooting_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Shooting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingActions set) { return set.Get(); }
        public void SetCallbacks(IShootingActions instance)
        {
            if (m_Wrapper.m_ShootingActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnShoot;
                @MousePosition.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_ShootingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public ShootingActions @Shooting => new ShootingActions(this);

    // Stab
    private readonly InputActionMap m_Stab;
    private IStabActions m_StabActionsCallbackInterface;
    private readonly InputAction m_Stab_Stab;
    private readonly InputAction m_Stab_MousePosition;
    public struct StabActions
    {
        private @PlayerInput m_Wrapper;
        public StabActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Stab => m_Wrapper.m_Stab_Stab;
        public InputAction @MousePosition => m_Wrapper.m_Stab_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Stab; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StabActions set) { return set.Get(); }
        public void SetCallbacks(IStabActions instance)
        {
            if (m_Wrapper.m_StabActionsCallbackInterface != null)
            {
                @Stab.started -= m_Wrapper.m_StabActionsCallbackInterface.OnStab;
                @Stab.performed -= m_Wrapper.m_StabActionsCallbackInterface.OnStab;
                @Stab.canceled -= m_Wrapper.m_StabActionsCallbackInterface.OnStab;
                @MousePosition.started -= m_Wrapper.m_StabActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_StabActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_StabActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_StabActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Stab.started += instance.OnStab;
                @Stab.performed += instance.OnStab;
                @Stab.canceled += instance.OnStab;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public StabActions @Stab => new StabActions(this);

    // HandToHand
    private readonly InputActionMap m_HandToHand;
    private IHandToHandActions m_HandToHandActionsCallbackInterface;
    private readonly InputAction m_HandToHand_Hit;
    private readonly InputAction m_HandToHand_MousePosition;
    public struct HandToHandActions
    {
        private @PlayerInput m_Wrapper;
        public HandToHandActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hit => m_Wrapper.m_HandToHand_Hit;
        public InputAction @MousePosition => m_Wrapper.m_HandToHand_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_HandToHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandToHandActions set) { return set.Get(); }
        public void SetCallbacks(IHandToHandActions instance)
        {
            if (m_Wrapper.m_HandToHandActionsCallbackInterface != null)
            {
                @Hit.started -= m_Wrapper.m_HandToHandActionsCallbackInterface.OnHit;
                @Hit.performed -= m_Wrapper.m_HandToHandActionsCallbackInterface.OnHit;
                @Hit.canceled -= m_Wrapper.m_HandToHandActionsCallbackInterface.OnHit;
                @MousePosition.started -= m_Wrapper.m_HandToHandActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_HandToHandActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_HandToHandActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_HandToHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Hit.started += instance.OnHit;
                @Hit.performed += instance.OnHit;
                @Hit.canceled += instance.OnHit;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public HandToHandActions @HandToHand => new HandToHandActions(this);

    // Journal
    private readonly InputActionMap m_Journal;
    private IJournalActions m_JournalActionsCallbackInterface;
    private readonly InputAction m_Journal_Open;
    private readonly InputAction m_Journal_ExclusiveClose;
    public struct JournalActions
    {
        private @PlayerInput m_Wrapper;
        public JournalActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Open => m_Wrapper.m_Journal_Open;
        public InputAction @ExclusiveClose => m_Wrapper.m_Journal_ExclusiveClose;
        public InputActionMap Get() { return m_Wrapper.m_Journal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JournalActions set) { return set.Get(); }
        public void SetCallbacks(IJournalActions instance)
        {
            if (m_Wrapper.m_JournalActionsCallbackInterface != null)
            {
                @Open.started -= m_Wrapper.m_JournalActionsCallbackInterface.OnOpen;
                @Open.performed -= m_Wrapper.m_JournalActionsCallbackInterface.OnOpen;
                @Open.canceled -= m_Wrapper.m_JournalActionsCallbackInterface.OnOpen;
                @ExclusiveClose.started -= m_Wrapper.m_JournalActionsCallbackInterface.OnExclusiveClose;
                @ExclusiveClose.performed -= m_Wrapper.m_JournalActionsCallbackInterface.OnExclusiveClose;
                @ExclusiveClose.canceled -= m_Wrapper.m_JournalActionsCallbackInterface.OnExclusiveClose;
            }
            m_Wrapper.m_JournalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Open.started += instance.OnOpen;
                @Open.performed += instance.OnOpen;
                @Open.canceled += instance.OnOpen;
                @ExclusiveClose.started += instance.OnExclusiveClose;
                @ExclusiveClose.performed += instance.OnExclusiveClose;
                @ExclusiveClose.canceled += instance.OnExclusiveClose;
            }
        }
    }
    public JournalActions @Journal => new JournalActions(this);
    public interface IInGameActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnCreep(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface IInteractionsActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnContinueKbd(InputAction.CallbackContext context);
        void OnContinueMouse(InputAction.CallbackContext context);
    }
    public interface ICraftingActions
    {
        void OnCloseExclusive(InputAction.CallbackContext context);
    }
    public interface IShootingActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IStabActions
    {
        void OnStab(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IHandToHandActions
    {
        void OnHit(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IJournalActions
    {
        void OnOpen(InputAction.CallbackContext context);
        void OnExclusiveClose(InputAction.CallbackContext context);
    }
}
